import matplotlib.pyplot as plt
from matplotlib.pyplot import figure
import numpy as np
import pandas as pd

def average_options(open_long,open_short,total_days):
    """
    calculate the average number of opened positions (both longs and shorts).
    Args:
    open_long: Total number of long positions
    open_short: Total number of short positions
    total_days: Total number of days

    Returns:
        Average of long and short positions
    """
    return (open_long/total_days), (open_short/total_days)

def plot_daily_revenue(daily_revenue, daily_trx_fee,daily_index_price):
    """
    Plot the different types of revenue generated by the protocol
    Args:
    daily_revenue: Total daily revenue
    daily_trx_fee: Total daily trx fee for both long and short options
    daily_index_price: Daily index price for ETH

    Returns:
        None
    """
    days=np.arange(0,len(daily_index_price),1)
    scaling=1000 #for scaling down the revenue number by 1000
    total_trx_fee= daily_trx_fee[0,:]+daily_trx_fee[1,:]
    plt.plot (days,[i/scaling for i in daily_index_price],label="Daily index price for ETH")
    plt.plot(days, [i/scaling for i in total_trx_fee],label="Daily trx revenue")
    plt.plot(days, [i/scaling for i in (daily_revenue-total_trx_fee)],label="Total daily funding fee revenue")
    plt.xlabel('Days')
    plt.ylabel('Revenue in K USD')
    plt.grid(axis='y')
    plt.title('Daily revenue generated by the protocol')
    plt.legend()
    plt.show()


def plot_remaining_active_positions(buyers_list,sellers_list, total_days):
    """
    Plot the remaining number of active buyers and sellers
    Args:
    buyers_list: Daily buyers list
    sellers_list: daily sellers list
    total_days: Total number of days
    Returns:
        None
    """
    buyers=[None]*len(buyers_list)
    sellers=[None]*len(sellers_list)
    days=np.arange(0,total_days,1)
    for i, (longs,shorts) in enumerate (zip(buyers_list,sellers_list)):
        buyers[i]=len(longs)
        sellers[i]=len(shorts)
    plt.plot (days,sellers,label="Remaining active seller positions")
    plt.plot(days, buyers,label="Remaining active buyer positions")
    plt.xlabel('Days')
    plt.ylabel('Number of remaining active buyers and sellers')
    plt.grid(axis='y')
    plt.title('Number of remaining active buyers and sellers for both call and put options')
    plt.legend()
    plt.show()

def plot_active_positions(open_long,close_long,open_short,close_short,total_days):
    """
    Plot the active number of buyers and sellers each daily
    Args:
    open_long: list of open daily long positions 
    close_long: list of close daily long positions
    open_short: list of open daily short positions
    close_short: list of close daily short positions
    total_days: Total number of days
    Returns:
        None
    """
    #Generate Cumulative sum of longs and shorts open positions
    long_options=[a - b for a, b in zip(open_long,close_long)]
    short_options=[a - b for a, b in zip(open_short,close_short)]
    long_series=pd.Series(long_options).cumsum()
    short_series=pd.Series(short_options).cumsum()
    days=np.arange(0,total_days,1)
    plt.plot (days,long_series,label="Cumulative sum of open long positions")
    plt.plot(days, short_series,label="Cumulative sum of open short positions")
    plt.xlabel('Days')
    plt.ylabel('Cumulative sum of active long and short positions')
    plt.grid(axis='y')
    plt.title('Cumulative sum of active options buyers and sellers')
    plt.legend()
    plt.show()